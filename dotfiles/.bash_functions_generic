function xpid()
{(
	xprop | grep PID | awk '{print $NF}'
)}

function ded()
{(
	find . -type d -empty -delete
)}

function def()
{(
	find . -type f -empty -delete
)}

function ds()
{(
    find . -maxdepth 1 -exec du -hs "{}" \; | sort -h
)}
function dsd()
{(
    find . -maxdepth 1 -type d -exec du -hs "{}" \; | sort -h
)}
alias dsr='ds | tac'
alias dsdr='dsd | tac'

function mcd()
{
	dir="$1"

	if [ ! -d "$dir" ]; then
		mkdir -p "$dir"
	fi

	cd "$dir"
}

function sort-by-alpha()
{(
	# get the first letter of each file and directory in the current directory
	# move all files and directories into their respective single letter directory
	# if any files are left put them into the misc/ directory
	ls | \
		cut -c1 | \
		sort -u | \
		grep -E -e "[[:alpha:]]" | \
		while read line; do
			mkdir -p "$line"
			mv "$line"* "$line/" 2>/dev/null
		done
	
	files_left="$(find . -maxdepth 1 -type f | wc -l)"

	if [[ "$files_left" != "0" ]]; then
		mkdir -p misc
		find . -maxdepth 1 -type f -exec mv "{}" misc/ \;
	fi
)}

function randnum()
{(
	first_num="$1"
	second_num="$2"

	if [[ -z "$first_num" ]]; then
		echo "$FUNCNAME: <max number> <optional: end number, if used max number becomes starting number>"
		return 1
	fi

	if [[ -z "$second_num" ]]; then
		second_num="$first_num"
		first_num="0"
	else
		second_num="$(( $second_num - $first_num ))"
	fi

	echo "$(( ($RANDOM % ($second_num + 1)) + $first_num ))"
)}

# All *wait* functions were created for simple command-line scripting purposes
# If inotifywait is available on the system it would likely be a better solution

function pwait()
{(
	process="$1"

	if [[ -z "$process" ]]; then
		echo "$FUNCNAME: <process name regex> <optional: number of minutes to sleep, 1 minute by default>"
		echo "Wait until a named process no longer exists."
		return 1
	fi

	wait="1"
	
	if [[ ! -z "$2" ]]; then
		wait="$2"
	fi

	until ! (ps_out="$(ps auxw)"; echo "$ps_out" | grep -E -e "$process" &>/dev/null); do
		echo "waiting $wait minute(s)... [process: $process]"
		sleep "$wait""m"
	done
)}

function mwait()
{(
	file="$1"

	if [[ -z "$file" ]]; then
		echo "$FUNCNAME: <file> <optional: number of minutes to sleep, 1 minute by default>"
		echo "Wait until the file modification time has changed."
		return 1
	fi

	wait="1"
	
	if [[ ! -z "$2" ]]; then
		wait="$2"
	fi

	if [[ ! -f "$file" ]]; then
		echo "File not found: $file"
		return 1
	fi

	file_mod_time="$(stat -c"%Y" "$file")"

	until [[ ! -f "$file" || ( "$file_mod_time" != "$(stat -c"%Y" "$file")" ) ]]; do
		echo "waiting $wait minute(s)... [file: $file]"
		sleep "$wait""m"
	done
)}

function fwait()
{(
	file="$1"

	if [[ -z "$file" ]]; then
		echo "$FUNCNAME: <file> <optional: number of minutes to sleep, 1 minute by default>"
		echo "Wait until the file contents have changed."
		return 1
	fi

	wait="1"
	
	if [[ ! -z "$2" ]]; then
		wait="$2"
	fi

	if [[ ! -f "$file" ]]; then
		echo "File not found: $file"
		return 1
	fi

	file_hash="$(sha1sum "$file" | cut -f1 -d' ')"
	file_mod_time="$(stat -c"%Y" "$file")"

	until [[ ! -f "$file" || ( ( "$file_mod_time" != "$(stat -c"%Y" "$file")" ) && ( "$file_hash" != "$(sha1sum "$file" | cut -f1 -d' ')" ) ) ]]; do
		echo "waiting $wait minute(s)... [file: $file]"
		sleep "$wait""m"
	done
)}

function dwait()
{(
	dir="$1"

	if [[ -z "$dir" ]]; then
		echo "$FUNCNAME: <dir> <optional: number of minutes to sleep, 1 minute by default>"
		echo "Wait until the directory has had contents removed, added, or changed."
		return 1
	fi

	wait="1"
	
	if [[ ! -z "$2" ]]; then
		wait="$2"
	fi

	if [[ ! -d "$dir" ]]; then
		echo "Directory not found: $dir"
		return 1
	fi

	dir_hash="$(find "$dir" -exec stat -c "%i %Y" "{}" \; 2>/dev/null | sha1sum)"

	until [[ ! -d "$dir" || ( "$dir_hash" != "$(find "$dir" -exec stat -c "%i %Y" "{}" \; 2>/dev/null | sha1sum)" ) ]]; do
		echo "waiting $wait minute(s)... [dir: $dir]"
		sleep "$wait""m"
	done
)}

function dnwait()
{(
	dir="$1"

	if [[ -z "$dir" ]]; then
		echo "$FUNCNAME: <dir> <optional: number of minutes to sleep, 1 minute by default>"
		echo "Wait until the directory has stopped having contents removed, added, or changed."
		return 1
	fi

	wait="1"
	
	if [[ ! -z "$2" ]]; then
		wait="$2"
	fi

	if [[ ! -d "$dir" ]]; then
		echo "Directory not found: $dir"
		return 1
	fi

	dir_hash=""

	until [[ ( $dir_hash != "" ) && ( ! -d "$dir" || ( "$dir_hash" == "$(find "$dir" -exec stat -c "%i %Y" "{}" \; 2>/dev/null | sha1sum)" ) ) ]]; do
		dir_hash="$(find "$dir" -exec stat -c "%i %Y" "{}" \; 2>/dev/null | sha1sum)"
		echo "waiting $wait minute(s)... [dir: $dir]"
		sleep "$wait""m"
	done
)}

function rename-to-numbers()
{(
    starting_number="$1"

    if [[ -z "$starting_number" ]]; then
        starting_number=1
    fi

    tmp_file="$(mktemp)"
    declare -A filenames=()

    find . -maxdepth 1 -type f | \
        awk -F. -vi="$starting_number" '{
                                            ofile=$0
                                            nfile="./"i

                                            # if the file has an extension add
                                            # it back when renaming the file
                                            if (NF > 2)
                                            {
                                                nfile=nfile"."$NF
                                            }

                                            print ofile"\t"nfile

                                            i++
                                        }' > "$tmp_file"
    
    while read line; do
        ofile="$(echo "$line" | cut -f1)"
        nfile="$(echo "$line" | cut -f2)"

        if [[ "$ofile" != "$nfile" ]]; then
            filenames["$ofile"]="$nfile"
        fi
    done < "$tmp_file"

    while [[ "${#filenames[@]}" -gt "0" ]]; do
        for ofile in "${!filenames[@]}"; do 
            nfile="${filenames["$ofile"]}"

            if [[ ! -f "$nfile" ]]; then
                mv --no-clobber "$ofile" "$nfile"
                unset "filenames["$ofile"]"
            fi
        done
    done
)}

function _ydownload()
{(
    download_program="$(which youtube-dl youtube-dl.exe | head -1)"
    format="22/18"
    batch_file="$(pwd)/a"
    done_file="done.txt"
    num_of_videos_to_get="0"
    cookie_tmp_file=""
    opt="--continue --ignore-errors --youtube-skip-dash-manifest --restrict-filenames"
    opt="$opt --no-call-home --no-warnings --no-check-certificate --external-downloader aria2c"

    if [[ -z "$download_program" ]]; then
        echo "[FATAL ERROR] No download program found..."
        return 1
    fi
    
    if [[ ! -z "$1" ]]; then
        format="$1"
    fi

    if [[ ! -z "$2" ]]; then
          [[ -z "$3" ]] && (echo "$2" | grep -q "^[0-9]*$")
          if [[ $? -eq 0 ]]; then
            num_of_videos_to_get="$2"
            batch_file="$(pwd)/a"
          else
            echo "$2" | grep -q '/'
            if [[ $? -eq 0 ]]; then
                batch_file="$2"
            else
                batch_file="$(pwd)/$2"
            fi
          fi
    fi

    echo "Batch file: $batch_file"

    if [[ ! -f "$batch_file" ]]; then
        echo -e "[ERROR] No batch file found..."
        return 1
    else
        if [[ ! -r "$batch_file" ]]; then
            echo -e "[ERROR] Batch file found but not readable..."
            return 1
        fi
    fi

    number_of_urls="$(wc -l "$batch_file" | awk '{print $1}')"
    echo "Number of URLs in batch file: $number_of_urls"

    if [[ ! -z "$3" ]]; then
        num_of_videos_to_get="$3"
    fi

    if [[ "$num_of_videos_to_get" -gt 0 ]]; then
      opt="$opt --playlist-end="$num_of_videos_to_get" --max-downloads=$num_of_videos_to_get"
      echo "Only downloading $num_of_videos_to_get..."
    fi

    if [[ "$format" != "none" ]]; then
        opt="$opt --format "$format""
        echo "Specifying the format: $format"
    else
        echo 'Not specifying a format...'
    fi

	if [[ "$(ls ~/Downloads/*_cookies.txt 2>/dev/null | wc -l)" -gt 0 ]]; then
        cookie_tmp_file="$(mktemp)"
        cat ~/Downloads/*_cookies.txt > "$cookie_tmp_file"

		opt="$opt --cookies "$cookie_tmp_file""
        echo 'Looked in ~/Downloads/ and found cookies...'
    else
        echo 'Looked in ~/Downloads/ but no cookies found...'
	fi

    if [[ -r "$done_file" ]]; then
        sort "$batch_file" "$done_file" | \
            uniq -d | \
            while read line; do
                sed -i "$batch_file" -e "s|^$line$||" -e '/^$/d' 2>/dev/null
            done
    fi

    echo -e "youtube-dl options being used:\n$opt"
 
    i=1
    # Note: youtube-dl.exe seems to mess with the while loop so pass the file names in on the 9th file descriptor which is generally never used by any program
    while read -u 9 url; do
        echo "Downloading [$i/$number_of_urls]: $url"

        # possibly useful youtube-dl options: --user-agent, --referer, --sleep-interval
        $download_program "$url" $opt && \
            echo "$url" >> "$done_file"

       sleep 1
       (( i++ ))
    done 9< "$batch_file"

    if [[ ! -z "$cookie_tmp_file" ]]; then
        rm "$cookie_tmp_file"
    fi
)}

function ya()
{(
    _ydownload "22/18" "$1" "$2"
)}

function yaq()
{(
    _ydownload "bestvideo+bestaudio" "$1" "$2"
)}

function yaa()
{(
    _ydownload "251/250/249/140" "$1" "$2"
)}

function yag()
{(
    _ydownload "none" "$1" "$2"
)}

function ya_all()
{(
  find . -type f -name "a" | sed -e 's/a$//' | while read dir; do (cd "$dir" && ya); done
)}

function uzrm()
{(
	zip_file="$1"

    unzip "$zip_file" && \
        rm "$zip_file"
)}

function fex()
{(
    find . -type f | sed -e 's/^.*[.]\(.*\)$/\1/' | sort | uniq -c | sort -n
)}
